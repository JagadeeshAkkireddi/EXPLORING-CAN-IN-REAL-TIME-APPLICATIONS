#include <lpc21xx.h>
#include "types.h"
#include "can.h"
#include "can_defines.h"
^M
void Init_CAN1(void)   ^M
{   ^M
    //cfg p0.25 pin as CAN1_RX pin(RD1),TD1 is exclusive    ^M
    PINSEL1|=RD1_PIN; //using defines from can_defines.h   ^M
                      // #define RD1_PIN 0x00040000 ,    ^M
                      //as RD1/ (i.e CAN1_RX)/p0.25   ^M
    //Reset CAN1 controller   ^M
    C1MOD=1;   ^M
    //All received messages are accepted       ^M
    AFMR=2;    ^M
    //Set baud Rate for CAN   ^M
    C1BTR=BTR_LVAL; //using defines from can_defines.h   ^M
    //Enable CAN1 controller   ^M
    C1MOD=0;    ^M
}^M
void CAN1_Tx(struct CAN_Frame txFrame)     ^M
{      ^M
  // Checking that the TX buffer is empty in C1GSR     ^M
     while((C1GSR&TBS1_BIT_READ)==0); //if status is 1 then empty    ^M
^M
  // place 11-bit tx id in C1T1D1     ^M
                C1TID1=txFrame.ID;      ^M
  // place cfg whether data/remote frame & no of data bytes in message      ^M
    C1TFI1=txFrame.vbf.RTR<<30|txFrame.vbf.DLC<<16;     ^M
  // For Data Frame place 1 to 8 bytes data into Data Tx Buffers      ^M
                if(txFrame.vbf.RTR!=1)     ^M
    {      ^M
          //Place data bytes 1-4 in C1TDA1      ^M
^M
                        C1TDA1= txFrame.Data1;     ^M
        //Place data bytes 5-8 in C1TDB1     ^M
      C1TDB1= txFrame.Data2;     ^M
                }^M
    //Select Tx Buf1 & Start Xmission using       ^M
     C1CMR=STB1_BIT_SET|TR_BIT_SET;      ^M
                //monitor tx status in C1GSR     ^M
      while((C1GSR&TCS1_BIT_READ)==0);     ^M
}^M
void CAN1_Rx(struct CAN_Frame *rxFrame)        ^M
{        ^M
//wait for CAN frame recv status        ^M
        while((C1GSR&RBS_BIT_READ)==0);        ^M
//read 11-bit CANid of recvd frame.         ^M
        rxFrame->ID=C1RID;        ^M
// read & extract data/remote frame status        ^M
        rxFrame->vbf.RTR=(C1RFS>>30)&1;        ^M
//read & extract data length        ^M
        rxFrame->vbf.DLC=(C1RFS>>16)&0x0f;        ^M
//check if recvd frame is data frame,extract data bytes        ^M
        if(rxFrame->vbf.RTR==0)        ^M
  {         ^M
//read 1-4 bytes from C1RDA        ^M
                rxFrame->Data1=C1RDA;        ^M
//read 5-8 bytes from C1RDB        ^M
    rxFrame->Data2=C1RDB;        ^M
}        ^M
^M
// Release receive buffer         ^M
^M
      C1CMR=RRB_BIT_SET;